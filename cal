#!/usr/bin/env ruby

class Calendar
  attr_accessor :month
  attr_accessor :year
  attr_accessor :calendar
  attr_accessor :rows

  def initialize(*args)
    input = args[0]
    @months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]

    if input.length == 1
      year = input[0].dup
      @month = "annual"
      @rows = 4
      year.chomp!
      @year = year.to_i
      @calendar = []
      self.annual(@year)
    elsif input.length > 2
      if input.length == 3 && input[1] == "rows"
        rows = input[2].dup
        @rows = rows.to_i
        #acceptable number of rows
        if @rows == 2 || @rows == 3 || @rows ==4 || @rows == 6 || @rows == 12
          year = input[0].dup
          @month = "annual"
          year.chomp!
          @year = year.to_i
          @calendar = []
          self.annual(@year)
        else
          puts "INPUT ERROR"
          puts "Accepted Format is: 2014, 01 2014, January 2014, or 2014 rows 2"
          puts "Number of rows must be either 2, 3, 4, 6, 12, or unspecified"
        end
      else
        puts "INPUT ERROR"
        puts "Accepted Format is: 2014, 01 2014, January 2014, or 2014 rows 2"
      end
    else
      month = input[0].dup
      year = input[1].dup
      month.chomp!
      @month = month
      year.chomp!
      @year = year.to_i
      self.zeller(@month, @year, false)
    end
  end #of initialize

  def annual(year)
    month = 0
    12.times do
      month += 1
      self.zeller(month, year, true)
    end
  end

  def zeller(month, year, annual)
    #checks to see if the written format rather than the number format
    if month.to_s.length > 3
      month.downcase!
      month.capitalize!

      #converts to number format
      month = months.index(month)
      month += 1
    end

    h = ""
    q = 1
    m = month.to_i
    k = year%100
    j = year/100
    y = year.to_i

    if m < 3
      y -= 1
      m += 12
      h = ( (q + (((m+1)*26)/10) + y + (y/4) + (6*(y/100)) + (y/400)) % 7 )
    else
      h = ( (q + ((13*(m+1))/5) + k + (k/4) + (j/4) + (5*j) ) % 7 )
    end
    h -= 1

    assemble_month(h, m, @year, annual)
  end #of zeller

#--------------------------------------------------------

  def assemble_month(h, m, year, annual)
    #SETUP----------

    #contains array of strings to be assembled when printed
    this_month = []

    days = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
    day_array = [31, "x", 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    temp_day = days[h]
    m -= 12 if m > 12
    temp_month = @months[m-1]
    days = day_array[m-1]
    temp_year = year.to_i
    if days == "x"
      if temp_year % 4 != 0
        days = 28
      elsif temp_year % 100 != 0 || temp_year % 400 == 0
        days = 29
      else
        days = 28
      end
    end

    #CAL HEADER-------
    total_length = 20
    month_length = temp_month.length
    header = ""
    if @month == "annual"
      margin_space = (total_length - month_length) / 2
      margin_space.times { header << " " }
      header << temp_month
    else
      margin_space = (total_length - (month_length + 5)) / 2
      margin_space.times { header << " " }
      header << temp_month
      header << " "
      header << year.to_s
    end

    #push header to array
    this_month << header
    this_month << "Su Mo Tu We Th Fr Sa"

    #CAL DATES-------
    day = 1
    count = 0
    row = ""
    h = 6 if h == -1
    leading_space = (h*3) + 1
    count += leading_space
    leading_space.times do
      row << " "
    end
    row << "1"
    count += 1
    day += 1

    #finish 1st row
    while count < 20
      if day < 10
        row << "  "
      else
        row << " "
      end
      row << day.to_s
      day += 1
      count += 3
    end
    #push 1st row to array
    this_month << row
    row_count = 1

    #other rows
    while day <= days
      count = 0
      row = ""
      day_count = 0
      while day_count <= 7
        day_count += 1
        while count < 20
          row << " " if day < 10
          row << day.to_s
          day += 1
          count += 3
          row << " " if count < 19
        end
      end

      #chops at last day
      last_day = row.index(days.to_s)
      row = row[0,last_day+2] if last_day

      #push other rows to array
      this_month << row
      row_count += 1
    end
    (6 - row_count).times {this_month << ""}

    if annual == true
      @calendar << this_month
      annual_print if @calendar.length == 12
    else
      single_print(this_month)
    end

  end #of assemble_month

#--------------------------------------------------------

  def single_print(this_month)
    this_month.each do |line|
      puts line
    end
  end

  def annual_print
    rows = @rows
    columns = 12 / rows
    #puts "#{rows} rows X #{columns} columns"
    #offsets months to print by (0,3,6,9)
    title_line = ""
    title_space = ( (20*columns) + (2*(columns-1)) -4 ) / 2
    (title_space - 1).times {title_line << " "}
    title_line << @year.to_s
    puts title_line
    line_break = ""
    puts line_break
    index = 0
    rows.times do #rows
      temp_months = []
      column_index = 0
      columns.times do
        temp_months << @calendar[index + column_index]
        column_index += 1
      end
      line_index = 0
      8.times do #lines per row
        temp_string = ""
        inner_index = 0
        columns.times do #each month per row per line
          temp_month = temp_months[inner_index]
          temp_line = temp_month[line_index]
          temp_string << temp_line
          #if line_index != 0 || inner_index != 2
          if inner_index != columns - 1
            (20 - temp_line.length).times {temp_string << " "}
          end
          temp_string << "  " if inner_index < columns - 1
          puts temp_string if inner_index == columns - 1
          inner_index += 1
        end #of inner loop (iterates through each month)
        line_index += 1
      end #of row loop (concats 3 months into 6 lines)
      index += columns
    end #of column loop (4 sets of 3's)
  end #of annual_print

end #of class

new_cal = Calendar.new(ARGV)
